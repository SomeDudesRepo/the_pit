A module is required that allows multiple processes to communicate, share data and coordinate execution whilst running on a single UNIX machine. Please provide a high-level written description of such a module. You should include an overview of the module's structure, details of any third-party or operating system utilities and features used and any design patterns to be employed. Also discuss the advantages and pitfalls of your proposed solution. 

IPC can be achieved in different ways: files, sockets, pipes, shared memory,  signals, and message passing. Without a detailed knowledge of the particular problem, it might be difficult to decide between options that cannot be clearly discarded. I would discard initially files, because they are much more easily subject to corruption and alteration. They are the least safe option. Given that the communication is within the same machine, I would discard sockets, since handling the networking aspects might be an overkill if the process doesn't need any other network communication. If the communication needs to be bidirectional and flexible (ie. the processes don't follow the pipeline model), pipes should be discarded as well. I personally do not like message passing, because in the implementations I know it forces an approach that brings the idea of parallelisation which might force bad design decisions. So for my suggestion I would be left with some form of shared memory. In this assessment, already the idea of instantiating at a particular memory address has been discussed, and that is the basis for shared memory IPC. As long as all processes are aware of the address, size and structure of the shared memory, communication can happen. This of course requires some control, for it is a shared resource. Also, the flexibility of the structures that can be created is subject to the ability to give those structures awareness of the memory constraints that come with shared memory for allocation and deallocation. I have attached a small example of a potential message inbox between two processes. One is in charge of allocating the memory and the other only uses it. They both communicate through the shared memory. The programs use boost shared memory, which has the advantage of being cross platform, although that is not a specified requirement. Boost IPC also has other means of using shared memory, including a message queue, but for a simple example, this should suffice. One limitation is that right now the message inbox is a char array, which a has a max size, and that can only accept readable chars. Any nulls inside the message would cut the message at that point. The size of the message could be included to solve that problem.
